package components

import (
	"fmt"

	"github.com/joeychilson/hackernews/pkg/hackernews"
)

templ Comments(comments []*hackernews.Item, level int) {
	for _, comment := range comments {
		<div
 			if level == 0 {
				class={ "border-l-4 bg-white p-4 mb-2", borderColor(comment.Deleted, level) }
			} else {
				class={ "border-l-4 bg-gray-50 p-4 mb-2", borderColor(comment.Deleted, level) }
				style={ margin(level) }
			}
		>
			if comment.Deleted {
				<span class="text-sm text-red-500">[deleted]</span>
			} else {
				<div class="mb-2">
					<span class="text-xs text-gray-600">
						by <a href={ templ.URL(fmt.Sprintf("/user?id=%v", comment.By)) } class="hover:text-blue-600">{ comment.By }</a>
						| { TimeAgo(comment.Time) }
					</span>
				</div>
				<p class="text-sm word-wrap break-words overflow-wrap break-word">
					@UnescapedText(comment.Text)
				</p>
				<div class="mt-2">
					<a href={ templ.URL(fmt.Sprintf("https://news.ycombinator.com/item?id=%v", comment.ID)) } class="underline text-xs text-blue-600">Reply</a>
				</div>
			}
		</div>
		if len(comment.Children) > 0 {
			@Comments(comment.Children, level+1)
		}
	}
}

func borderColor(deleted bool, level int) string {
	if deleted {
		return "border-red-500"
	}
	switch level {
	case 0:
		return "border-orange-500"
	case 1:
		return "border-gray-500"
	case 2:
		return "border-gray-400"
	case 3:
		return "border-gray-300"
	case 4:
		return "border-gray-200"
	default:
		return "border-gray-100"
	}
}

func margin(level int) string {
	return fmt.Sprintf("margin-left: %vrem;", level)
}
